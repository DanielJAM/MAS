buses-own [
  ;Static read-only variables. These values never change. You can read them but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small" 2 means "medium" and 3 means "large".

  ;Dynamic read-only variables. These values may change over time. You can read them but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ;New local variables for students.
  ;You can create any new local variable you want. Just declare them here.
  cur_pos
  own_schedule
  list-bus-stops
  busschedule
  returning
  transfers
  init
  init_pos
  init_schedule
  bus_configuration
  ;line_passengers
  votes_for
  votes_responses
  request-timeout
  master_bus_id
  creation_count
  pos_trans
  biddings
  won_passengers
  occupancy
  _leasing_list
]

globals [
  graph
  amount_passengers_dropped
  amount_created_buses
]


;INIT FUNCTIONS
to init-buses
  ; Initialize your agents here.
  set master_bus_id 24
  set request-timeout 0
  set won_passengers []
  init-busschedule

  ;This list contains the topology of the entire network of bus stops which is known to all agents. You can use this for instance to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]

  ifelse bus_id != master_bus_id[
    send-message master_bus_id (list "request" "init")
  ][
    init-master-bus
  ]
end

to init-busschedule
  set busschedule [[16 5 17 7 1 23] [16 3 9 20 12] [2 8 9 3 9 8 6] [0 15 18 15 12] [11 1 19 23 14 0] [3 4 10 21 22 0] [3 4 10 13 23]]
end

to init-travel-start
  ;are we driving or starting to drive?
  ifelse current_stop = -1 or current_stop = 3[
    travel-to item init_pos init_schedule
  ][
    ;check if we arrived
    ifelse member? current_stop own_schedule[
      ;we made it
      set init false
    ][
      ;go to the next stop
      set init_pos init_pos + 1
      travel-to item init_pos init_schedule
    ]
  ]
end



;MASTER
to execute-master
  let limit 8
  if count buses != limit[
    set limit limit - count buses
    repeat limit [
      add-bus 3
    ]
  ]
  check-mailbox-master
  foreach _leasing_list[
    let new_id item 0 ?1
    let schedule_pos item 1 ?1
    set bus_configuration replace-item schedule_pos bus_configuration lput new_id item schedule_pos bus_configuration
    add-bus 3
  ]
  set _leasing_list []
end

to check-mailbox-master
    ;go through inbox
    set creation_count 0
    foreach inbox[
      let mess ?1
      let _sender item 1 mess
      let message item 2 mess
      let _type item 0 message
      ifelse _type = "request"[
        handle-request-master _sender message
      ][
        handle-response-master _sender message
      ]
    ]
    set inbox []
end

to handle-request-master [_sender message]
  let _subject item 1 message
  if _subject = "init" [
    let bus_group get-bus-group _sender
    let bus_group_pos position bus_group bus_configuration
    send-message _sender (list "response" "init" bus_group_pos)
  ]
  if _subject = "vote"[
    ;sender wants to vote on whether to get an extra bus on its line
    ;request vote from all other buses on line and store
    ;also base own vote on amount passengers waiting at busstops
    ;schedule_pos gives the position of the schedule in the busschedule list
    let bus_group get-bus-group _sender
    let schedule_pos position bus_group bus_configuration

    ;a request to vote counts as a vote for
    set votes_for replace-item schedule_pos votes_for 1
    set votes_responses replace-item schedule_pos votes_responses 1

    ifelse length bus_group = 1[
      ;if only 1 bus, we already have the amount of votes for and are done!
      evaluate-line schedule_pos
      set votes_for replace-item schedule_pos votes_for 0
      set votes_responses replace-item schedule_pos votes_responses 0
    ][
      ;else ask for vote from other busses
      if item schedule_pos votes_for = 1 [
        foreach bus_group[
          if _sender != ?1[
            send-message ?1 (list "request" "vote")
          ]
        ]
      ]
    ]
  ]
  if _subject = "bidding" [
    let bus_stop item 2 message
    
    if empty? item bus_stop biddings and not empty? get-passengers-at-stop bus_stop [
      let bus_lines item 3 message
      ;check eerst of andere lijnen ook deze stop in hun schedule hebben
      let competition []
      foreach bus_lines[
        let line_pos ?1
        let bus_group item line_pos bus_configuration
        foreach bus_group[
          
          set competition lput ?1 competition
        ]
      ]
      ;Vraag alle deelnemende bussen om hun bod
      ;Process die bij handle-response-master
      foreach competition[
        let _passengers get-passengers-at-stop bus_stop
        send-message ?1 (list "request" "bidding" (list bus_stop _passengers))
        
      ]
      set biddings replace-item bus_stop biddings (list length competition)
    ]
  ]
end

to handle-response-master [_sender message]
  let _subject item 1 message

  if _subject = "vote" [
    let bus_group get-bus-group _sender
    let schedule_pos position bus_group bus_configuration

    let vote item 2 message
    let amount_for item schedule_pos votes_for
    set amount_for amount_for + vote
    set votes_for replace-item schedule_pos votes_for amount_for

    let vote_responses item schedule_pos votes_responses
    set vote_responses vote_responses + 1
    set votes_responses replace-item schedule_pos votes_responses vote_responses

    if vote_responses = length bus_group [
      evaluate-line schedule_pos
      set votes_for replace-item schedule_pos votes_for 0
      set votes_responses replace-item schedule_pos votes_responses 0
    ]
  ]
  if _subject = "bidding" [

    let _bids item 2 message
    let bus_stop item 0 _bids
    let _amount_busses_wanted item 0 item bus_stop biddings

    set biddings replace-item bus_stop biddings lput _bids item bus_stop biddings
  
    let _amount_busses length item bus_stop biddings - 1

    if _amount_busses_wanted = _amount_busses[
      evaluate-bids bus_stop

      
      
      
     
      
      
      
      set biddings replace-item bus_stop biddings []
    ]
  ]
end

to evaluate-bids [bus_stop]
  ;we hebben genoeg binnen!
  let num_passengers length item 3 (item 1 (item bus_stop biddings))
  let i 0
  let firsts []
  let seconds [] 
  let thirds []
  let winners[]
  while [i < num_passengers][
    set winners lput [] winners
    set firsts lput [] firsts
    set seconds lput [] seconds
    set thirds lput [] thirds
    set i (i + 1)
  ]
  let spaces []
  foreach item bus_stop biddings [
    if is-list? ?1[
      let bids item 3 ?1
      let space item 2 ?1
      let bus item 1 ?1
      set spaces lput (list bus space) spaces
      foreach bids [
        let _pass_id item 0 ?1
        let score item 1 ?1
        let _position position ?1 bids
        ifelse empty? item _position firsts [
          set firsts replace-item _position firsts (list bus score _pass_id)
        ][
        let _first item _position firsts
        let cur_score item 1 _first
        ifelse score > cur_score [
          set seconds replace-item _position seconds _first
          set firsts replace-item _position firsts (list bus score _pass_id)
        ][
        ifelse empty? item _position seconds[
          set seconds replace-item _position seconds (list bus score _pass_id)
        ][
        let second item _position seconds
        set cur_score item 1 second
        ifelse score > cur_score[
          set thirds replace-item _position thirds second
          set seconds replace-item _position seconds (list bus score _pass_id)
        ][
        ifelse empty? item _position thirds[
          set thirds replace-item _position thirds (list bus score _pass_id)
        ][
        let third item _position thirds
        set cur_score item 1 third
        if score > cur_score[
          set thirds replace-item _position thirds (list bus score _pass_id) 
        ]]]]]]
      ]
    ]
  ]
  set i 0
  let found false
  while [i < num_passengers][
    let _first item i firsts
    let bus item 0 _first
    foreach spaces[
      let space_def ?1
      let space_pos position space_def spaces
      if item 0 space_def = bus [
        let space item 1 space_def
        if space > 0[
          set space space - 1
          set spaces replace-item space_pos spaces (list bus space) 
          set winners replace-item i winners _first
          set found true
        ]
      ]
    ]
    if not found [            
      let second item i seconds
      set bus item 0 second
      foreach spaces[
        let space_def ?1
        let space_pos position space_def spaces
        if item 0 space_def = bus [
          let space item 1 space_def
          if space > 0[
            set space space - 1
            set spaces replace-item space_pos spaces (list bus space) 
            set winners replace-item i winners second
            set found true
          ]
        ]
      ]
    ]
    if not found [
      let third item i thirds
      set bus item 0 third
      foreach spaces[
        let space_def ?1
        let space_pos position space_def spaces
        if item 0 space_def = bus [
          let space item 1 space_def
          if space > 0[
            set space space - 1
            set spaces replace-item space_pos spaces (list bus space) 
            set winners replace-item i winners third
            set found true
          ]
        ]
      ]
    ]
    if not found[
      let busses []
      let third item i thirds
      let _pass_id item 2 third
      foreach spaces[
        let space_def ?1
        let space_pos position space_def spaces
        if item 1 space_def > 0 [
          set busses lput item 0 space_def busses
        ]
        if not empty? busses[
          let _random item 0 n-of 1 busses
          
          set winners replace-item i winners (list _random 0 _pass_id)
          foreach spaces [
            set bus item 0 space_def
            let space item 1 space_def
            if _random = bus[
              set space space - 1
              set spaces replace-item space_pos spaces (list bus space) 
            ]
          ]
        ]
      ]
    ]
    set i i + 1
  ]
  announce-winners winners
end

to announce-winners [winners]
  let results []
  
  foreach winners [
    if not empty? ?1 [
      let found false
      let winner item 0 ?1
      let _pass_id item 2 ?1
      foreach results [
        let _position position ?1 results
        if item 0 ?1 = winner [
          let tmp item 1 ?1
          set tmp lput _pass_id tmp
          set results replace-item _position results (list winner tmp)
          set found true
        ]
      ]
      if found = false[
        set results lput (list winner (list _pass_id)) results
      ]
    ]
  ]
  foreach results [
    if not empty? ?1 [
      let winner item 0 ?1
      let _passengers item 1 ?1
      send-message winner (list "response" "bidding" _passengers)
    ]
  ]
end

to evaluate-line [schedule_pos]
  ;check if votes for have majority
  let possible_votes (length item schedule_pos bus_configuration)
  let amount_for item schedule_pos votes_for
  if amount_for > floor (possible_votes / 2) [
    add-bus-line schedule_pos
    set amount_created_buses amount_created_buses + 1
  ]
end

to-report get-bus-group [_sender]
  ;bus_group gives the group of busses which operate on the same line
  let bus_group 0
  foreach bus_configuration[
    if member? _sender ?1[
      set bus_group ?1
    ]
  ]
  report bus_group
end

to add-bus-line [schedule_pos]
  ;get newest id
  let new_id who + count buses + creation_count
  set creation_count creation_count + 1
  ;add new bus to bus_configuration
  ;set bus_configuration replace-item schedule_pos bus_configuration lput new_id item schedule_pos bus_configuration
  ;add-bus 3
  set _leasing_list lput (list new_id schedule_pos) _leasing_list
end

to-report get-capacity [_bus_type]
  let capacity 0
  if _bus_type = 1 [set capacity bus_type1_capacity]
  if _bus_type = 2 [set capacity bus_type2_capacity]
  if _bus_type = 3 [set capacity bus_type3_capacity]
  report capacity
end

to-report get-space
  report get-capacity bus_type - length bus_passengers
end

to-report check-busstops [schedule_pos]
  let schedule item schedule_pos busschedule
  let total 0
  foreach schedule[
    set total total + length get-passengers-at-stop ?1
  ]
  report total
end



;ALL BUSES
to check_inbox
  foreach inbox[
    let mess ?1
    let _sender item 1 mess
    let message item 2 mess
    let _type item 0 message
    if _type = "request"[
      handle-request _sender message
    ]
    if _type = "response"[
      handle-response _sender message
    ]
  ]
  set inbox []
end

to handle-request [_sender message]
  let _subject item 1 message

  if _subject = "vote" [
    let capacity get-capacity bus_type
    ifelse length bus_passengers > 0.33 * capacity [
      send-message _sender (list "response" "vote" 1)
    ][
      send-message _sender (list "response" "vote" 0)
    ]
  ]

  if _subject = "bidding" [
    let stop_info item 2 message
    let bus_stop item 0 stop_info
    let _passengers item 1 stop_info
    let bid calculate_bid bus_stop _passengers
    send-message _sender (list "response" "bidding" bid)
  ]
end

to handle-response [_sender message]
  let _subject item 1 message
  if _subject = "init" [
    let pos item 2 message
    ifelse pos = 0[
      init-line-15
    ][
    ifelse pos = 1[
      init-line-22
    ][
    ifelse pos = 2[
      init-line-34
    ][
    ifelse pos = 3[
      init-line-40
    ][
    ifelse pos = 4[
      init-line-62
    ][
    ifelse pos = 5[
      init-line-42
    ][
    init-line-45
    ]]]]]]
  ]
  if _subject = "bidding" [
    let _passengers item 2 message
    foreach _passengers [
      set won_passengers lput ?1 won_passengers
    ]
    set won_passengers remove-duplicates won_passengers
  ]
end

to-report calculate_bid [bus_stop passengers_stop]
  let bids []
  let i 0
  if init = true or own_schedule = 0 [
    foreach passengers_stop [
      let pass_id item 0 ?1
      let score -9000
      set bids lput (list pass_id score) bids
    ]
    report (list bus_stop bus_id 0 bids)
  ]


  ;kijken per passenger!
  foreach passengers_stop[
    ;bepaal transfers
    let pass_id item 0 ?1
    let des item 1 ?1
    let transfer_score 0
    let final_dest 0
    ifelse member? des own_schedule[
      set transfer_score 1
      set final_dest des
    ][    
      set pos_trans []
      foreach busschedule [
        let other_schedule 0
        if ?1 != own_schedule [set other_schedule ?1]  ; don't compare with itself
        let transfer 0
        if is-list? other_schedule [
          foreach other_schedule [
            if member? ?1 own_schedule [
              ;transfer possible
              set transfer ?1
              set pos_trans lput transfer pos_trans
              if member? des other_schedule [
                set transfer_score -1
                set final_dest transfer
              ]
            ]
          ]
        ]
      ]              
      if transfer_score = 0 [
        let transfer 0
        foreach pos_trans[
          ;search schema from this site
          set transfer ?1
          foreach busschedule [
            let other_schedule 0
            if ?1 != own_schedule [set other_schedule ?1]
            if is-list? other_schedule and member? transfer other_schedule [
              ;zo een schema gevonden, hier kun je niet in 1x door (al eerder gevonden).
              ;kan je er nu wel in 1x komen? (verbetering?)
              let second_trans 0
              foreach other_schedule[
                set second_trans ?1
                foreach busschedule[
                  if member? second_trans ?1 and member? des ?1 [
                    ;this is an improvement!
                    set transfer_score -2
                    set final_dest transfer
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
    
    let _distance 0
  
    ifelse current_stop != -1[
      set _distance calculate-distance current_stop final_dest
    ][
      set _distance calculate-distance next_stop final_dest
    ]
    
    let score (transfer_score * 1000 - _distance )
    

    set bids lput (list pass_id score) bids
  ]
  let _capacity get-capacity bus_type
  let space _capacity - occupancy
  report (list bus_stop bus_id space bids)
end

to-report calculate-distance [curr dest]
  let _distance 0
  let _cur_pos cur_pos
  let _next_pos -1
  let dest_pos position dest own_schedule
  let _returning returning
  ifelse returning[
    set _next_pos _cur_pos - 1
    if _next_pos < 0[
      set _next_pos 1
      set _returning false
    ]
  ][
    set _next_pos _cur_pos + 1
    if _next_pos > length own_schedule - 1 [
      set _next_pos length own_schedule - 2
      set _returning true
    ]
  ]
  while [_next_pos != dest_pos][
    set _distance _distance + get-distance (item _cur_pos own_schedule) (item _next_pos own_schedule)
    set _cur_pos _next_pos
    ifelse _returning[
      set _next_pos _cur_pos - 1
      if _next_pos < 0[
        set _next_pos 1
        set _returning false
      ]
    ][
    set _next_pos _cur_pos + 1
    if _next_pos > length own_schedule - 1 [
      set _next_pos length own_schedule - 2
      set _returning true
    ]
    ]
  ]
  report _distance
end

to kick-passengers-out
  foreach bus_passengers [
    let pass_id item 0 ?1
    let des item 1 ?1

    let trans_des -2
    let trans_des_pos -2
    let trans_id_pos -2

    ;Heeft deze passagier een transfer?
    if is-number? (position pass_id transfers) [
      set trans_id_pos (position pass_id transfers)
      set trans_des_pos (trans_id_pos + 1)
      set trans_des (item trans_des_pos transfers)
    ]

    if des = current_stop or trans_des = current_stop[
      ;uitstappen en transfers of aantal passengers dropped aanpassen
      drop-off-passenger pass_id
      ifelse trans_des = -2 [
        set amount_passengers_dropped amount_passengers_dropped + 1
      ][
        set transfers remove-item (trans_des_pos) transfers
        set transfers remove-item (trans_id_pos) transfers
      ]
    ]
  ]
end

to-report get-passenger-one-transfer [pass_id des]
  set pos_trans []
  foreach busschedule [
    let other_schedule 0
    if ?1 != own_schedule [set other_schedule ?1]  ; don't compare with itself
    let transfer 0
    if is-list? other_schedule [
      foreach other_schedule [
        if member? ?1 own_schedule [
          ;transfer possible
          set transfer ?1
          set pos_trans lput transfer pos_trans
          ;check if this works in 1 go
          if member? des other_schedule [
            ifelse transfer = current_stop[
              ;this is the transfer location; don't pick up passenger
              report true
            ][
              set transfers lput pass_id transfers
              set transfers lput transfer transfers
              pick-up-passenger pass_id
              report true
            ]
          ]
        ]
      ]
    ]
  ]
  report false
end

to-report get-passenger-two-transfers [pass_id des]
  let transfer 0
  foreach pos_trans[
    ;search schema from this site
    set transfer ?1
    foreach busschedule [
      let other_schedule 0
      if ?1 != own_schedule [set other_schedule ?1]
      if is-list? other_schedule and member? transfer other_schedule [
        ;zo een schema gevonden, hier kun je niet in 1x door (al eerder gevonden).
        ;kan je er nu wel in 1x komen? (verbetering?)
        let second_trans 0
        foreach other_schedule[
          set second_trans ?1
          foreach busschedule[
            if member? second_trans ?1 and member? des ?1 [
              ;this is an improvement!
              ifelse transfer = current_stop[
                ;this is the transfer location; don't pick up passenger
                report true
              ][
                set transfers lput pass_id transfers
                set transfers lput transfer transfers
                pick-up-passenger pass_id
                report true
              ]
            ]
          ]
        ]
      ]
    ]
  ]
  report false
end

to get-new-passenger [pass_id des]
  ; check if bussize is big enough to fit another passenger
  if (length bus_passengers) >= get-capacity bus_type[
    stop
  ]

  ;des(tination) is in own_schedule?
  if member? des own_schedule [
    pick-up-passenger pass_id
    stop
  ]


  ;transfer!
  ;check if other lines have connections with current line, so transfer possible
  if get-passenger-one-transfer pass_id des [
    stop
  ]

  ;double transfer! (is always possible in our schedule)
  if get-passenger-two-transfers pass_id des [
    stop
  ]
end

to check_won_passenger [pass_id des]
  foreach won_passengers[
    if pass_id = ?1 [
      get-new-passenger pass_id des
      set won_passengers remove pass_id won_passengers
    ]
  ]
end

to get-new-passengers
  let crossing false
  foreach busschedule [
    let other_schedule ?1
    if member? current_stop other_schedule and other_schedule != own_schedule [
      set crossing false
    ]
  ]
  foreach get-passengers-at-stop current_stop[
    let pass_id item 0 ?1
    let des item 1 ?1
    ifelse crossing = true [
      check_won_passenger pass_id des
    ][
      get-new-passenger pass_id des
    ]
  ]
end

to execute-actions
  ;bus_24 makes more buses and then stops
  if bus_id = master_bus_id[
    execute-master
    stop
  ]

  if own_schedule = 0 [
    ;nog niet geïnitieerd
    check_inbox
    stop
  ]

  if init = true[
    init-travel-start
    check_inbox
    if init = true[
      stop
    ]
  ]

  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'
  ifelse current_stop = -1 [
    ;driving
    travel-to next_stop
  ][
    ;arrived at busstop
    ;KICK PASSENGERS OUT
    kick-passengers-out

    ;GET NEW PASSENGERS IN
    get-new-passengers

    ;Returning or not?
    ifelse returning[
      set cur_pos cur_pos - 1
    ][
      set cur_pos cur_pos + 1
    ]
    if cur_pos > (length own_schedule) - 1[
      set returning true
      set cur_pos cur_pos - 2
    ]
    if cur_pos < 0 [
      set returning false
      set cur_pos 1
    ]

    check-vote

    ;start moving
    let nextbus_stop item cur_pos own_schedule
    travel-to nextbus_stop

    check-bid
  ]
  set occupancy length bus_passengers
  check_inbox
end

to check-vote
  ;Are we almost full?
  let capacity get-capacity bus_type
  if length bus_passengers > 0.33 * capacity and request-timeout = 0 [
    
    send-message master_bus_id (list "request" "vote")
    
    set request-timeout 15
  ]
  if request-timeout > 0 [
    set request-timeout request-timeout - 1
  ]
end

to check-bid
  ;update second_nextbus_stop
  let tmp_cur_pos cur_pos
  ifelse returning[
    set tmp_cur_pos tmp_cur_pos - 1
  ][
  set tmp_cur_pos tmp_cur_pos + 1
  ]
  if tmp_cur_pos > (length own_schedule) - 1[
    set tmp_cur_pos tmp_cur_pos - 2
  ]
  if tmp_cur_pos < 0 [
    set tmp_cur_pos 1
  ]
  let second_nextbus_stop item cur_pos own_schedule
  
  ;check if bidding is needed  
  let bus_lines []
  foreach busschedule[
    if member? second_nextbus_stop ?1 [
      let line_pos position ?1 busschedule
      set bus_lines lput line_pos bus_lines
    ]
  ]
  if length bus_lines > 1[
    if get-passengers-at-stop second_nextbus_stop != [] [
      send-message master_bus_id (list "request" "bidding" second_nextbus_stop bus_lines)
    ]
  ]
end



;INIT BUSES
to init-master-bus
  set _leasing_list []
  set creation_count 0
  set bus_configuration [[25] [26] [27] [28] [29] [30] [31]]
  ;set line_passengers [[0 0] [0 0] [0 0] [0 0] [0 0] [0 0] [0 0]]
  set votes_for [0 0 0 0 0 0 0]
  set votes_responses [0 0 0 0 0 0 0]
  set biddings [[][][][][][][][][][][][][][][][][][][][][][][][]]
end

to init-line-15
  set transfers []
  set init true
  set init_pos 0
  set init_schedule [16]
  set own_schedule item 0 busschedule
  set returning false
end

to init-line-22
  set transfers []
  set init false
  set cur_pos 1
  set own_schedule item 1 busschedule
  set returning false
end

to init-line-34
  set transfers []
  set init false
  set cur_pos 3
  set own_schedule item 2 busschedule
  set returning false
end

to init-line-40
  set transfers []
  set init true
  set init_schedule [9 20 12]
  set own_schedule item 3 busschedule
  set returning false
end

to init-line-62
  set transfers []
  set init true
  set init_pos 0
  set init_schedule [4 10 21 22 0]
  set cur_pos 5
  set own_schedule item 4 busschedule
  set returning true
end

to init-line-42
  set transfers []
  set init false
  set cur_pos 0
  set own_schedule item 5 busschedule
  set returning false
end

to init-line-45
  set transfers []
  set init false
  set cur_pos 0
  set own_schedule item 6 busschedule
  set returning false
end
