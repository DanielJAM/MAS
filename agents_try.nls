buses-own [
  ; Static read-only variables. These values never change. You can read them but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small" 2 means "medium" and 3 means "large".
    
  ; Dynamic read-only variables. These values may change over time. You can read them but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).
  
  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  cur_pos
  beliefs
  list-bus-stops
  busschedule
  returning
  transfers
  buses_info
  init_bus_info
]
 
globals [ 
  graph
  amount_passengers_dropped
  ]

to init-buses
  ; Initialize your agents here.
  if not is-list? beliefs [init-beliefs]
  if not is-list? busschedule [init-busschedule]
  
  ; This list contains the topology of the entire network of bus stops which is known to all agents. You can use this for instance to calculate the shortest path between two bus stops.
  if not is-list? graph [
    set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
    ]
  
  if not is-list? init_bus_info []
  
  ifelse bus_id = 24 
  [
    init-line-15
  ][
  ifelse bus_id = 25 
  [
    init-line-15-rev
  ][
  ifelse bus_id = 26
  [
    init-line-22
  ][
  ifelse bus_id = 27
  [
    init-line-22-rev   
  ][
  ifelse bus_id = 28
  [
    init-line-34
  ][
  ifelse bus_id = 29
  [
    init-line-34-rev
  ][
  ifelse bus_id = 30
  [
    init-line-40
  ][
  ifelse bus_id = 31
  [
    init-line-40-rev
  ][
  ifelse bus_id = 32
  [
    init-line-62
  ][
  ifelse bus_id = 33
  [
    init-line-62-rev  
  ][
  ifelse bus_id = 34
  [
    init-line-42
  ][
  ifelse bus_id = 35
  [
    init-line-42-rev
  ][
  ifelse bus_id = 36
  [
    init-line-45
  ][
  init-line-45-rev
  ]]]]]]]]]]]]]
end

to init-busschedule
  set busschedule [[16 5 17 7 1 23] [16 3 9 20 12] [2 8 9 3 9 8 6] [0 15 18 15 12] [11 1 19 23 14 0] [3 4 10 21 22 0] [3 4 10 13 23]]
end

to init-beliefs
   set list-bus-stops [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
   set beliefs []
   foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'
  update-beliefs
  let tmp round bus_id / 2
  let my_schedule item (tmp - 12) busschedule
  ifelse current_stop = -1 [
    ;driving
    travel-to next_stop
  ][
  ;arrived at busstop
  
  ;KICK PASSENGERS OUT
  foreach bus_passengers [
    let pass_id item 0 ?1
    let des item 1 ?1
    let trans_des -2
    let trans_des_pos -2
    let trans_id_pos -2
    
    if is-number? (position pass_id transfers) [
      set trans_id_pos (position pass_id transfers)
      set trans_des_pos (trans_id_pos + 1)
      set trans_des (item trans_des_pos transfers)
      ]
    
    if des = current_stop or trans_des = current_stop
    [
      ;uitstappen
      drop-off-passenger pass_id
      ifelse trans_des = -2 [
        set amount_passengers_dropped amount_passengers_dropped + 1
        ]
      [
        set transfers remove-item (trans_id_pos) transfers
        set transfers remove-item (trans_des_pos) transfers
        ]
      ]
    ]
  ]
  
  ;GET NEW PASSENGERS IN
  let _wait false
  let found false
  foreach get-passengers-at-stop current_stop[
    let pass_id item 0 ?1
    let des item 1 ?1
    ;des is in my_schedule
    if member? des my_schedule 
    [
      if (length bus_passengers) < 150[
        pick-up-passenger pass_id
        set found true
      ]
    ]
    if found = false[
      ;other lines pass this bus-stop and have destination?
      foreach busschedule [
        let other_schedule ?1
        if (member? des other_schedule and member? current_stop other_schedule and found = false)
        [
          ;wait for other bus.
          set _wait true
          set found true
        ]
      ]
      if _wait != true[
        ;transfer!
        
        ;check of other buslijn ergens een connectie heeft met huidige buslijn, dus transfer mogelijk
        if found = false [
          foreach busschedule [
            let other_schedule ?1
            let transfer 0
            foreach other_schedule [
              if member? ?1 my_schedule [
                ;transfer mogelijk
                set transfer ?1
              ]
            ]
            ;kijken of via die transfer bestemming kan bereiken
            foreach busschedule [
              let other2_schedule ?1
              if member? transfer other2_schedule and member? des other2_schedule and found = false [
                ;overstappen via transfer
                set found true
                set transfers lput pass_id transfers
                set transfers lput transfer transfers
                pick-up-passenger pass_id
              ]
              ]
            ]
          ]
        
        
        if found != true[
          ;no clue what to do, pick the guy up.. see what happens.
          if (length bus_passengers) < 150 and random 2 = 1[
            pick-up-passenger pass_id    
          ]
        ]
      
    ]
  ]
  
  
  ifelse returning 
  [
    set cur_pos cur_pos - 1
  ][
    set cur_pos cur_pos + 1 
  ]
  if cur_pos > (length my_schedule) - 1
  [
    set returning true
    set cur_pos cur_pos - 2
  ]
  if cur_pos < 0 [
    set returning false
    set cur_pos 1
  ]
  ;start moving
  travel-to item cur_pos my_schedule 
  ]
end

to update-beliefs
  set beliefs []
  foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end

to init-line-15
  add-bus 3
  set buses_info lput [] buses_info
  set transfers []
  set current_stop 16
  set cur_pos 0
  set xcor 6
  set ycor 26
end

to init-line-15-rev
  add-bus 3
  set buses_info lput [] buses_info
  set transfers []
  set current_stop 23
  set cur_pos 5
  set returning true
  set xcor 15
  set ycor 4
end

to init-line-22
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 16
  set cur_pos 0
  set xcor 6
  set ycor 26
end

to init-line-22-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 12
  set cur_pos 4
  set returning true
  set xcor 31
  set ycor 13
end

to init-line-34
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 2
  set cur_pos 0
  set xcor 31
  set ycor 30
end

to init-line-34-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 6
  set cur_pos 6
  set returning true
  set xcor 25
  set ycor 30
end

to init-line-40
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 0
  set cur_pos 0
  set xcor 27
  set ycor 7
end

to init-line-40-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 12
  set cur_pos 4
  set returning true
  set xcor 31
  set ycor 13
end

to init-line-62
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 11
  set cur_pos 0
  set xcor 4
  set ycor 12
end

to init-line-62-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 0
  set cur_pos 5
  set returning true
  set xcor 27
  set ycor 7
end

to init-line-42
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 3
  set cur_pos 0
  set xcor 22
  set ycor 21
end

to init-line-42-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 0
  set cur_pos 5
  set returning true
  set xcor 27
  set ycor 7
end

to init-line-45
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 3
  set cur_pos 0
  set xcor 22
  set ycor 21
end

to init-line-45-rev
  set buses_info lput [] buses_info
  add-bus 3
  set transfers []
  set current_stop 23
  set cur_pos 4
  set returning true
  set xcor 15
  set ycor 4
end