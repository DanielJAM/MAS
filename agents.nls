buses-own [
  ; Static read-only variables. These values never change. You can read them but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small" 2 means "medium" and 3 means "large".
    
  ; Dynamic read-only variables. These values may change over time. You can read them but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).
  cur_pos
  beliefs
  list-bus-stops
  busschedule
  returning
  
  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.

]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  init-beliefs
  init-busschedule
  
  set returning false
  
  ; This list contains the topology of the entire network of bus stops which is known to all agents. You can use this for instance to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  ifelse bus_id = 24 
  [
    init-line-15
  ][
  ifelse bus_id = 25 
  [
    init-line-15-rev
  ][
  ifelse bus_id = 26
  [
    init-line-22
  ][
  ifelse bus_id = 27
  [
    init-line-22-rev   
  ][
  ifelse bus_id = 28
  [
    init-line-34
  ][
  ifelse bus_id = 29
  [
    init-line-34-rev
  ][
  ifelse bus_id = 30
  [
    init-line-40
  ][
  ifelse bus_id = 31
  [
    init-line-40-rev
  ][
  ifelse bus_id = 32
  [
    init-line-62
  ][
  ifelse bus_id = 33
  [
    init-line-62-rev  
  ][
  ifelse bus_id = 34
  [
    init-line-42
  ][
  ifelse bus_id = 35
  [
    init-line-42-rev
  ][
  ifelse bus_id = 36
  [
    init-line-45
  ][
  init-line-45-rev
  ]]]]]]]]]]]]]
end

to init-busschedule
  set busschedule [[16 5 17 7 1 23] [16 3 9 20 12] [2 8 9 3 9 8 6] [0 15 18 15 12] [11 1 19 23 14 0] [3 4 10 21 22 0] [3 4 10 13 23]]
end

to init-beliefs
   set list-bus-stops [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
   set beliefs []
   foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'
  update-beliefs
  let tmp round bus_id / 2
  let schedule item (tmp - 12) busschedule
  ifelse current_stop = -1 [
    ;driving
    travel-to next_stop
  ][
  ;arrived at busstop
  ;kick passengers out
  foreach bus_passengers [
    let pass_id item 0 ?1
    let des item 1 ?1
    
    ifelse des = current_stop
    [
      ;uitstappen
      drop-off-passenger pass_id
      set amount_passengers_dropped amount_passengers_dropped + 1
    ][
      let found false
      if not (member? des schedule)[
        foreach busschedule [
          let schl ?1
          if member? current_stop schl and member? des schl and found = false[
            ;overstappen
            set found true
            drop-off-passenger pass_id
          ]
        ]
      ]
      if found = false [
        ;wtf moeten we met deze persoon?
        if random 2 = 1 [
          drop-off-passenger pass_id         
        ]
      ]
    ]
  ]
  ;get new passengers in
  let _wait false
  foreach get-passengers-at-stop current_stop[
    let pass_id item 0 ?1
    let des item 1 ?1
    ;des is in schedule
    ifelse member? des schedule 
    [
      if (length bus_passengers) < 150[
        pick-up-passenger pass_id
      ]
    ][
      ;other lines pass this bus-stop?
      foreach busschedule [
        let schl ?1
        if (member? des schl and member? current_stop schl)
        [
          ;wait for other bus.
          set _wait true
        ]
      ]
      if _wait != true[
        ;transfer!
        let found false
        foreach schedule [
          let check ?1
          foreach busschedule[
            if member? check ?1 and member? des ?1 and found = false[
              if (length bus_passengers) < 150[
                pick-up-passenger pass_id         
                set found true               
              ]
            ]
          ]
        ]
        if found != true[
          ;no clue what to do, pick the guy up.. see what happends.
          if (length bus_passengers) < 150 and random 2 = 1[
            pick-up-passenger pass_id    
          ]
        ]
      ]
    ]
  ]
  
  
  ifelse returning 
  [
    set cur_pos cur_pos - 1
  ][
    set cur_pos cur_pos + 1 
  ]
  if cur_pos > (length schedule) - 1
  [
    set returning true
    set cur_pos cur_pos - 2
  ]
  if cur_pos < 0 [
    set returning false
    set cur_pos 1
  ]
  ;start moving
  travel-to item cur_pos schedule 
  ]
end

to update-beliefs
  set beliefs []
  foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end

to init-line-15
  set current_stop 16
  set cur_pos 0
  set xcor 6
  set ycor 26
end

to init-line-15-rev
  set current_stop 23
  set cur_pos 5
  set returning true
  set xcor 15
  set ycor 4
end

to init-line-22
  set current_stop 16
  set cur_pos 0
  set xcor 6
  set ycor 26
end

to init-line-22-rev
  set current_stop 12
  set cur_pos 4
  set returning true
  set xcor 31
  set ycor 13
end

to init-line-34
  set current_stop 2
  set cur_pos 0
  set xcor 31
  set ycor 30
end

to init-line-34-rev
  set current_stop 6
  set cur_pos 6
  set returning true
  set xcor 25
  set ycor 30
end

to init-line-40
  set current_stop 0
  set cur_pos 0
  set xcor 27
  set ycor 7
end

to init-line-40-rev
  set current_stop 12
  set cur_pos 4
  set returning true
  set xcor 31
  set ycor 13
end

to init-line-62
  set current_stop 11
  set cur_pos 0
  set xcor 4
  set ycor 12
end

to init-line-62-rev
  set current_stop 0
  set cur_pos 5
  set returning true
  set xcor 27
  set ycor 7
end

to init-line-42
  set current_stop 3
  set cur_pos 0
  set xcor 22
  set ycor 21
end

to init-line-42-rev
  set current_stop 0
  set cur_pos 5
  set returning true
  set xcor 27
  set ycor 7
end

to init-line-45
  set current_stop 3
  set cur_pos 0
  set xcor 22
  set ycor 21
end

to init-line-45-rev
  set current_stop 23
  set cur_pos 4
  set returning true
  set xcor 15
  set ycor 4
end