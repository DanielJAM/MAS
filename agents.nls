buses-own [
  ; Static read-only variables. These values never change. You can read them but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small" 2 means "medium" and 3 means "large".
    
  ; Dynamic read-only variables. These values may change over time. You can read them but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).
  
  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  cur_pos
  own_schedule
  beliefs
  list-bus-stops
  busschedule
  returning
  transfers
  line-buses
  init
  init_pos
  init_schedule
  
]
 
globals [
  graph
  amount_passengers_dropped
  ]

to init-buses
  ; Initialize your agents here.
  init-beliefs
  init-busschedule
  
  ; This list contains the topology of the entire network of bus stops which is known to all agents. You can use this for instance to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]  
  
  ;SET parameters every bus
  set returning false
  
  ifelse bus_id = 25
  [
    init-line-15
  ][
  ifelse bus_id = 26[
    init-line-22
  ][
  ifelse bus_id = 27[
    init-line-34
  ][
  ifelse bus_id = 28[
    init-line-40
  ][
  ifelse bus_id = 29[
    init-line-62
  ][
  ifelse bus_id = 30[
    init-line-42
  ][
    init-line-45
  ]]]]]]
end

to init-busschedule
  set busschedule [[16 5 17 7 1 23] [16 3 9 20 12] [2 8 9 3 9 8 6] [0 15 18 15 12] [11 1 19 23 14 0] [3 4 10 21 22 0] [3 4 10 13 23]]
end

to init-beliefs
   set list-bus-stops [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
   set beliefs []
   foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end


to execute-actions
  
  ;bus_24 makes more buses and then stops
  let limit 8
  if bus_id = 24[
    if count buses != limit[
      set limit limit - count buses
      repeat limit [
        add-bus 3
      ]
    ]
    stop
  ]

  
  if init = true[
    ;are we driving or starting to drive?
    ifelse current_stop = -1 or current_stop = 3[
      travel-to item init_pos init_schedule
      stop
    ][
      ;check if we arrived
      ifelse member? current_stop own_schedule[
        ;we made it
        set init false
      ][
        ;go to the next stop
        set init_pos init_pos + 1
        travel-to item init_pos init_schedule
        stop
      ]
    ]    
  ]
  
  
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'
  update-beliefs
  ifelse current_stop = -1 [
    ;driving
    travel-to next_stop
  ][
    ;arrived at busstop
    ;KICK PASSENGERS OUT
    foreach bus_passengers [
      let pass_id item 0 ?1
      let des item 1 ?1
      
      let trans_des -2
      let trans_des_pos -2
      let trans_id_pos -2    
     
      ;Heeft deze passagier een transfer?
      if is-number? (position pass_id transfers) [
        set trans_id_pos (position pass_id transfers)
        set trans_des_pos (trans_id_pos + 1)
        set trans_des (item trans_des_pos transfers)
      ]
         
      if des = current_stop or trans_des = current_stop[
        ;uitstappen en transfers of aantal passengers dropped aanpassen
        drop-off-passenger pass_id
        ifelse trans_des = -2 [
          set amount_passengers_dropped amount_passengers_dropped + 1
        ][
          set transfers remove-item (trans_des_pos) transfers
          set transfers remove-item (trans_id_pos) transfers
        ]
      ]
    ]

    ;GET NEW PASSENGERS IN
    let found false
    foreach get-passengers-at-stop current_stop[
      let pass_id item 0 ?1
      let des item 1 ?1
      
      ;des is in own_schedule?
      if member? des own_schedule [
        set found true
        if (length bus_passengers) < 150[    ;deze check wordt al gedaan in pick-up-passenger
          pick-up-passenger pass_id
        ]
      ]
    
      ;other lines pass this bus-stop and have destination?
      if found = false[
        foreach busschedule [
          let other_schedule ?1
          if (member? des other_schedule and member? current_stop other_schedule and found = false)[
            ;wait for other bus.
            set found true
          ]
        ]
        let pos_trans []
        if found = false[
          ;transfer!
          ;check of other buslijn ergens een connectie heeft met huidige buslijn, dus transfer mogelijk
          foreach busschedule [
            let other_schedule 0
            if ?1 != own_schedule [set other_schedule ?1]  ;niet jezelf met jezelf vergelijken
            let transfer 0
            if is-list? other_schedule and found = false[
              foreach other_schedule [
                if member? ?1 own_schedule and found = false[
                  ;transfer mogelijk
                  set transfer ?1
                  set pos_trans lput transfer pos_trans
                  ;check of dit in 1 keer goed gaat
                  if member? des other_schedule and found = false[
                    ifelse transfer = current_stop[
                      ;deze persoon wilt hier al overstappen, niet meenemen
                      set found true
                    ][
                      set transfers lput pass_id transfers
                      set transfers lput transfer transfers
                      set found true
                      pick-up-passenger pass_id
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
        ;eerst kijken of er niet een bus langs komt met maar 1 transfer!
        
        if found = false[
          ;we zoeken een dubbele transfer
          let transfer 0
          foreach pos_trans[
            ;zoek schema vanaf deze site
            set transfer ?1
            foreach busschedule [
              let other_schedule 0
              if ?1 != own_schedule [set other_schedule ?1]
              if is-list? other_schedule and member? transfer other_schedule and found = false[
                ;zo een schema gevonden, hier kun je niet in 1x door (al eerder gevonden).
                ;kan je er nu wel in 1x komen? (verbetering?)
                let second_trans 0
                foreach other_schedule[
                  set second_trans ?1
                  foreach busschedule[
                    if member? second_trans ?1 and member? des ?1 and found = false[
                      ;this is an improvement!
                      ifelse transfer = current_stop[
                        ;deze persoon wilt hier al overstappen, niet meenemen
                        set found true
                      ][
                        set transfers lput pass_id transfers
                        set transfers lput transfer transfers
                        set found true
                        pick-up-passenger pass_id
                      ]
                    ]
                  ]
                ]
              ]              
            ]
          ]
        ]
      ]
      set found false
    ]
    ifelse returning[
      set cur_pos cur_pos - 1
    ][
      set cur_pos cur_pos + 1 
    ]
    if cur_pos > (length own_schedule) - 1[
      set returning true
      set cur_pos cur_pos - 2
    ]
    if cur_pos < 0 [
      set returning false
      set cur_pos 1
    ]
    ;start moving
    travel-to item cur_pos own_schedule 
  ]
end


to update-beliefs
  set beliefs []
  foreach list-bus-stops [ set beliefs lput ( get-passengers-at-stop ?1 ) beliefs ]
end

to init-line-15
  set transfers []
  set init true
  set init_pos 0
  set init_schedule [16]
  set own_schedule item 0 busschedule
  set returning false
  set buses-info lput 25 buses_info
end

to init-line-22
  set buses_info lput [] buses_info
  set transfers []
  set init false
  set cur_pos 1
  set own_schedule item 1 busschedule
  set returning false
  set buses-info lput 26 buses_info
end

to init-line-34
  set transfers []
  set init false
  set cur_pos 3
  set own_schedule item 2 busschedule
  set returning false
  set buses-info lput 27 buses-info
end

to init-line-40
  set transfers []
  set init true
  set init_schedule [9 20 12]
  set own_schedule item 3 busschedule
  set returning false
  set buses-info lput 28 buses-info
end

to init-line-62
  set transfers []
  set init true
  set init_pos 0
  set init_schedule [4 10 21 22 0]
  set cur_pos 5
  set own_schedule item 4 busschedule
  set returning true
  set buses-info lput 29 buses-info
end

to init-line-42
  set transfers []
  set init false
  set cur_pos 0
  set own_schedule item 5 busschedule
  set returning false
  set buses-info lput 30 buses-info
end

to init-line-45
  set transfers []
  set init false
  set cur_pos 0
  set own_schedule item 6 busschedule
  set returning false
  set buses-info lput 31 buses-info
end